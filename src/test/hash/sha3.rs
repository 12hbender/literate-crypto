use {
    super::test,
    crate::{Sha3_224, Sha3_256, Sha3_384, Sha3_512},
};

/// SHA3-224 test vectors.
#[test]
fn sha3_224() {
    let hash = Sha3_224::default();

    test(
        &hash,
        &[0xa3; 200],
        &[
            0x93, 0x76, 0x81, 0x6a, 0xba, 0x50, 0x3f, 0x72, 0xf9, 0x6c, 0xe7, 0xeb, 0x65, 0xac,
            0x09, 0x5d, 0xee, 0xe3, 0xbe, 0x4b, 0xf9, 0xbb, 0xc2, 0xa1, 0xcb, 0x7e, 0x11, 0xe0,
        ],
    );

    test(
        &hash,
        b"abc",
        &[
            0xe6, 0x42, 0x82, 0x4c, 0x3f, 0x8c, 0xf2, 0x4a, 0xd0, 0x92, 0x34, 0xee, 0x7d, 0x3c,
            0x76, 0x6f, 0xc9, 0xa3, 0xa5, 0x16, 0x8d, 0x0c, 0x94, 0xad, 0x73, 0xb4, 0x6f, 0xdf,
        ],
    );

    test(
        &hash,
        b"hello world",
        &[
            0xdf, 0xb7, 0xf1, 0x8c, 0x77, 0xe9, 0x28, 0xbb, 0x56, 0xfa, 0xeb, 0x2d, 0xa2, 0x72,
            0x91, 0xbd, 0x79, 0x0b, 0xc1, 0x04, 0x5c, 0xde, 0x45, 0xf3, 0x21, 0x0b, 0xb6, 0xc5,
        ],
    );

    test(
        &hash,
        b"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\
        abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
        &[
            0xcc, 0x79, 0x51, 0x9b, 0x27, 0x92, 0x33, 0x4a, 0x8e, 0x00, 0x26, 0x01, 0x20, 0x13,
            0x21, 0x02, 0x60, 0x4e, 0xad, 0xf5, 0x7e, 0xb1, 0x67, 0x80, 0xf8, 0xab, 0x6d, 0x45,
        ],
    );

    test(
        &hash,
        b"helloabchelloabchelloabchelloabchelloabchelloabchelloabchelloabc",
        &[
            0x19, 0xc1, 0x0b, 0xd9, 0xe8, 0x5c, 0x14, 0xea, 0xb4, 0x5d, 0x56, 0x83, 0xe4, 0x95,
            0x85, 0x9a, 0xd3, 0xa7, 0x89, 0x57, 0x53, 0x33, 0xa6, 0x2e, 0xb6, 0x79, 0xc6, 0x0c,
        ],
    );
}

/// SHA3-256 test vectors.
#[test]
fn sha3_256() {
    let hash = Sha3_256::default();

    test(
        &hash,
        &[0xa3; 200],
        &[
            0x79, 0xf3, 0x8a, 0xde, 0xc5, 0xc2, 0x03, 0x07, 0xa9, 0x8e, 0xf7, 0x6e, 0x83, 0x24,
            0xaf, 0xbf, 0xd4, 0x6c, 0xfd, 0x81, 0xb2, 0x2e, 0x39, 0x73, 0xc6, 0x5f, 0xa1, 0xbd,
            0x9d, 0xe3, 0x17, 0x87,
        ],
    );

    test(
        &hash,
        b"abc",
        &[
            0x3a, 0x98, 0x5d, 0xa7, 0x4f, 0xe2, 0x25, 0xb2, 0x04, 0x5c, 0x17, 0x2d, 0x6b, 0xd3,
            0x90, 0xbd, 0x85, 0x5f, 0x08, 0x6e, 0x3e, 0x9d, 0x52, 0x5b, 0x46, 0xbf, 0xe2, 0x45,
            0x11, 0x43, 0x15, 0x32,
        ],
    );

    test(
        &hash,
        b"hello world",
        &[
            0x64, 0x4b, 0xcc, 0x7e, 0x56, 0x43, 0x73, 0x04, 0x09, 0x99, 0xaa, 0xc8, 0x9e, 0x76,
            0x22, 0xf3, 0xca, 0x71, 0xfb, 0xa1, 0xd9, 0x72, 0xfd, 0x94, 0xa3, 0x1c, 0x3b, 0xfb,
            0xf2, 0x4e, 0x39, 0x38,
        ],
    );

    test(
        &hash,
        b"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\
        abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
        &[
            0x7b, 0xcb, 0x7e, 0x15, 0xce, 0x26, 0x90, 0x46, 0xeb, 0xa7, 0x84, 0x98, 0x8e, 0x07,
            0xc5, 0x73, 0xde, 0x14, 0xdf, 0x4c, 0x91, 0xf8, 0xb2, 0x15, 0x37, 0x0e, 0x60, 0x34,
            0xb1, 0x70, 0x32, 0x02,
        ],
    );

    test(
        &hash,
        b"helloabchelloabchelloabchelloabchelloabchelloabchelloabchelloabc",
        &[
            0xd4, 0xb6, 0x40, 0xd9, 0x85, 0x99, 0x66, 0x0b, 0xb2, 0x05, 0xcd, 0x79, 0xd5, 0x47,
            0xde, 0x4b, 0x5b, 0xe3, 0x6b, 0x7d, 0x37, 0xbb, 0x10, 0x77, 0x29, 0x72, 0x81, 0xcd,
            0x9e, 0x3a, 0x50, 0x84,
        ],
    );
}

/// SHA3-384 test vectors.
#[test]
fn sha3_384() {
    let hash = Sha3_384::default();

    test(
        &hash,
        &[0xa3; 200],
        &[
            0x18, 0x81, 0xde, 0x2c, 0xa7, 0xe4, 0x1e, 0xf9, 0x5d, 0xc4, 0x73, 0x2b, 0x8f, 0x5f,
            0x00, 0x2b, 0x18, 0x9c, 0xc1, 0xe4, 0x2b, 0x74, 0x16, 0x8e, 0xd1, 0x73, 0x26, 0x49,
            0xce, 0x1d, 0xbc, 0xdd, 0x76, 0x19, 0x7a, 0x31, 0xfd, 0x55, 0xee, 0x98, 0x9f, 0x2d,
            0x70, 0x50, 0xdd, 0x47, 0x3e, 0x8f,
        ],
    );

    test(
        &hash,
        b"abc",
        &[
            0xec, 0x01, 0x49, 0x82, 0x88, 0x51, 0x6f, 0xc9, 0x26, 0x45, 0x9f, 0x58, 0xe2, 0xc6,
            0xad, 0x8d, 0xf9, 0xb4, 0x73, 0xcb, 0x0f, 0xc0, 0x8c, 0x25, 0x96, 0xda, 0x7c, 0xf0,
            0xe4, 0x9b, 0xe4, 0xb2, 0x98, 0xd8, 0x8c, 0xea, 0x92, 0x7a, 0xc7, 0xf5, 0x39, 0xf1,
            0xed, 0xf2, 0x28, 0x37, 0x6d, 0x25,
        ],
    );

    test(
        &hash,
        b"hello world",
        &[
            0x83, 0xbf, 0xf2, 0x8d, 0xde, 0x1b, 0x1b, 0xf5, 0x81, 0x00, 0x71, 0xc6, 0x64, 0x3c,
            0x08, 0xe5, 0xb0, 0x5b, 0xdb, 0x83, 0x6e, 0xff, 0xd7, 0x0b, 0x40, 0x3e, 0xa8, 0xea,
            0x0a, 0x63, 0x4d, 0xc4, 0x99, 0x7e, 0xb1, 0x05, 0x3a, 0xa3, 0x59, 0x3f, 0x59, 0x0f,
            0x9c, 0x63, 0x63, 0x0d, 0xd9, 0x0b,
        ],
    );

    test(
        &hash,
        b"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\
        abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
        &[
            0x9b, 0x76, 0x5e, 0x34, 0xf5, 0xbb, 0x78, 0xa0, 0xc4, 0xa1, 0x47, 0x7b, 0x60, 0xad,
            0x31, 0xf8, 0xea, 0x00, 0x12, 0xf9, 0xa1, 0x5f, 0x78, 0xe6, 0x28, 0x9c, 0xd7, 0xb2,
            0xba, 0x87, 0xdc, 0x93, 0xe9, 0x3d, 0x3d, 0xf0, 0xb3, 0xfb, 0x9c, 0xbd, 0xe6, 0x03,
            0x3d, 0x01, 0x27, 0x21, 0x72, 0x51,
        ],
    );

    test(
        &hash,
        b"helloabchelloabchelloabchelloabchelloabchelloabchelloabchelloabc",
        &[
            0x47, 0xd6, 0x1a, 0x46, 0x6e, 0x3a, 0xec, 0xb0, 0xa1, 0x97, 0xe0, 0x9c, 0x92, 0x53,
            0x12, 0xaa, 0x48, 0x6d, 0x82, 0x44, 0x86, 0x75, 0xd0, 0xff, 0x87, 0x2b, 0x5a, 0x76,
            0x30, 0x86, 0xa3, 0x12, 0x82, 0x74, 0x4a, 0x54, 0xe9, 0x78, 0x41, 0x21, 0x3f, 0xed,
            0x72, 0xae, 0x5b, 0x6c, 0xf5, 0x14,
        ],
    );
}

/// SHA3-512 test vectors.
#[test]
fn sha3_512() {
    let hash = Sha3_512::default();

    test(
        &hash,
        &[0xa3; 200],
        &[
            0xe7, 0x6d, 0xfa, 0xd2, 0x20, 0x84, 0xa8, 0xb1, 0x46, 0x7f, 0xcf, 0x2f, 0xfa, 0x58,
            0x36, 0x1b, 0xec, 0x76, 0x28, 0xed, 0xf5, 0xf3, 0xfd, 0xc0, 0xe4, 0x80, 0x5d, 0xc4,
            0x8c, 0xae, 0xec, 0xa8, 0x1b, 0x7c, 0x13, 0xc3, 0x0a, 0xdf, 0x52, 0xa3, 0x65, 0x95,
            0x84, 0x73, 0x9a, 0x2d, 0xf4, 0x6b, 0xe5, 0x89, 0xc5, 0x1c, 0xa1, 0xa4, 0xa8, 0x41,
            0x6d, 0xf6, 0x54, 0x5a, 0x1c, 0xe8, 0xba, 0x00,
        ],
    );

    test(
        &hash,
        b"abc",
        &[
            0xb7, 0x51, 0x85, 0x0b, 0x1a, 0x57, 0x16, 0x8a, 0x56, 0x93, 0xcd, 0x92, 0x4b, 0x6b,
            0x09, 0x6e, 0x08, 0xf6, 0x21, 0x82, 0x74, 0x44, 0xf7, 0x0d, 0x88, 0x4f, 0x5d, 0x02,
            0x40, 0xd2, 0x71, 0x2e, 0x10, 0xe1, 0x16, 0xe9, 0x19, 0x2a, 0xf3, 0xc9, 0x1a, 0x7e,
            0xc5, 0x76, 0x47, 0xe3, 0x93, 0x40, 0x57, 0x34, 0x0b, 0x4c, 0xf4, 0x08, 0xd5, 0xa5,
            0x65, 0x92, 0xf8, 0x27, 0x4e, 0xec, 0x53, 0xf0,
        ],
    );

    test(
        &hash,
        b"hello world",
        &[
            0x84, 0x00, 0x06, 0x65, 0x3e, 0x9a, 0xc9, 0xe9, 0x51, 0x17, 0xa1, 0x5c, 0x91, 0x5c,
            0xaa, 0xb8, 0x16, 0x62, 0x91, 0x8e, 0x92, 0x5d, 0xe9, 0xe0, 0x04, 0xf7, 0x74, 0xff,
            0x82, 0xd7, 0x07, 0x9a, 0x40, 0xd4, 0xd2, 0x7b, 0x1b, 0x37, 0x26, 0x57, 0xc6, 0x1d,
            0x46, 0xd4, 0x70, 0x30, 0x4c, 0x88, 0xc7, 0x88, 0xb3, 0xa4, 0x52, 0x7a, 0xd0, 0x74,
            0xd1, 0xdc, 0xcb, 0xee, 0x5d, 0xba, 0xa9, 0x9a,
        ],
    );

    test(
        &hash,
        b"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\
        abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
        &[
            0x6d, 0xf3, 0x3f, 0x94, 0x44, 0xca, 0x61, 0x4d, 0xc6, 0x00, 0xfa, 0x41, 0x69, 0x63,
            0x14, 0x61, 0x52, 0x16, 0xf6, 0x7f, 0xd3, 0x8b, 0xc2, 0xa9, 0x7b, 0x16, 0xe9, 0xe0,
            0x50, 0xff, 0xa1, 0x26, 0x85, 0xdd, 0xd7, 0x2e, 0x0b, 0x26, 0x3a, 0x9d, 0x3c, 0xdc,
            0x0c, 0x24, 0xad, 0x5f, 0x84, 0x22, 0x43, 0x24, 0xce, 0x4d, 0x82, 0x2e, 0x63, 0xb3,
            0x53, 0xd5, 0xaa, 0x2d, 0x29, 0x1b, 0xf0, 0xe1,
        ],
    );

    test(
        &hash,
        b"helloabchelloabchelloabchelloabchelloabchelloabchelloabchelloabc",
        &[
            0x57, 0x3f, 0xa3, 0xa8, 0xd0, 0xaa, 0xe6, 0xaf, 0xe6, 0x39, 0x54, 0x80, 0xa7, 0x21,
            0xb3, 0xb2, 0x63, 0xa5, 0x5f, 0xc2, 0xb1, 0x3b, 0xbd, 0x69, 0x04, 0xf9, 0xb7, 0x7b,
            0x87, 0x96, 0x42, 0xba, 0x8e, 0xc3, 0xd4, 0xfa, 0xe7, 0xac, 0x22, 0xea, 0x65, 0x7a,
            0x51, 0x76, 0xea, 0x17, 0x5f, 0x79, 0x0a, 0xab, 0xdd, 0xf6, 0x8d, 0x4e, 0x36, 0x10,
            0x00, 0x6c, 0xee, 0x68, 0x32, 0xe3, 0x7d, 0x2d,
        ],
    );
}
